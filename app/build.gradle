apply plugin: 'com.android.application'

apply plugin: 'jacoco'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

//apply plugin: 'kotlin-android-extensions'

apply plugin: 'androidx.navigation.safeargs'



android {
    compileSdkVersion rootProject.COMPILE_SDK_VERSION
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        applicationId "com.smb.smbapplication"

        minSdkVersion rootProject.MIN_SDK_VERSION
        targetSdkVersion rootProject.TARGET_SDK_VERSION
        versionCode rootProject.VERSION_CODE
        versionName rootProject.VERSION_NAME

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
kapt {
    generateStubs = true
}

jacoco {
    toolVersion = "0.7.4+"
}

dependencies {

    //:cropper1  :imagepicker1

    implementation fileTree(dir: 'libs', include: ['*.jar'])


    //implementation 'com.android.support:support-v4:'+ rootProject.supportLibVersion
    //kapt 'com.android.databinding:compiler:3.1.4'
    // android support libraries
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //implementation "org.jetbrains.anko:anko:0.10.5"
    implementation 'org.apache.commons:commons-text:1.6'

    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'

    //Support libs
    implementation 'androidx.appcompat:appcompat:'+rootProject.supportLibVersion
    implementation 'androidx.constraintlayout:constraintlayout:'+rootProject.constraintLayoutVersion
    // Life cycle
    implementation 'androidx.lifecycle:lifecycle-extensions:'+rootProject.archLifecycleVersion
    implementation 'androidx.lifecycle:lifecycle-common-java8:'+rootProject.archLifecycleVersion
    kapt 'androidx.lifecycle:lifecycle-compiler:'+rootProject.archLifecycleVersion
    // Room
    implementation 'androidx.room:room-runtime:'+rootProject.archRoomVersion
    kapt 'androidx.room:room-compiler:'+rootProject.archRoomVersion
    //Paging
    implementation 'androidx.paging:paging-runtime:'+rootProject.archPaggingVersion
    //Navigation
    implementation 'androidx.navigation:navigation-fragment-ktx:'+rootProject.archNavigationVersion
    implementation 'androidx.navigation:navigation-ui-ktx:'+rootProject.archNavigationVersion
    // dependency injection
    implementation 'com.google.dagger:dagger:' + rootProject.dagger_version
    implementation 'com.google.dagger:dagger-android:' + rootProject.dagger_version
    implementation 'com.google.dagger:dagger-android-support:' + rootProject.dagger_version
    kapt 'com.google.dagger:dagger-android-processor:' + rootProject.dagger_version
    kapt 'com.google.dagger:dagger-compiler:' + rootProject.dagger_version
    // Image Loading
    implementation 'com.github.bumptech.glide:glide:' + rootProject.glideVersion
    kapt 'com.github.bumptech.glide:compiler:' + rootProject.glideVersion
    // retrofit webservice
    implementation('com.squareup.retrofit2:retrofit:' + rootProject.retrofitVersion) {
        exclude module: 'okhttp-ws'
    }
    implementation('com.squareup.retrofit2:converter-gson:' + rootProject.retrofitVersion) {
        exclude module: 'okhttp-ws'
    }
    implementation 'com.squareup.okhttp3:logging-interceptor:' + rootProject.okHttpVersion



    // Memory Leaks
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.1'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.1'
    // Optional, if you use support library fragments:
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.1'

    // UI Testing
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'


}


task fullCoverageReport(type: JacocoReport) {
    dependsOn 'createDebugCoverageReport'
    dependsOn 'testDebugUnitTest'
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*',
                      '**/*_MembersInjector.class',
                      '**/Dagger*Component.class',
                      '**/Dagger*Component$Builder.class',
                      '**/*_*Factory.class',
                      '**/*ComponentImpl.class',
                      '**/*SubComponentBuilder.class']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

// we need all open to run tests which  a we enable only for debug builds.
project.tasks.whenTaskAdded {
    if (it.name == "testReleaseUnitTest") {
        it.enabled = false
    }
}
